# generated by datamodel-codegen:
#   filename:  o2-product-set.json
#   timestamp: 2025-06-11T17:38:18+00:00

from __future__ import annotations


from pydantic import BaseModel, field_validator, ValidationError
import logging

logging.getLogger(__name__)


class Handset(BaseModel):
    brand: str
    name: str
    code: str
    averageRating: float
    totalReviews: int
    inStock: bool
    isFiveGReady: bool
    isSwitchUpEligible: bool
    skuCode: str

    @field_validator("averageRating", mode="before")
    @classmethod
    def validate_average_rating(cls, v):
        try:
            v = float(v)
        except Exception as err:
            logging.error(err)
        if not (0 <= v <= 5):
            raise ValueError("averageRating can't be negative, or above 5!")
        return v


class HandsetColour(BaseModel):
    name: str
    hexCode: str

    @field_validator("hexCode", mode="before")
    @classmethod
    def validate_hex_color(cls, v):
        import re

        if not re.fullmatch(r"#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})", v):
            raise ValueError("Invalid hex color code")
        return v


class Tariff(BaseModel):
    planOfferingCode: str
    name: str
    totalUpfront: int
    airtimeMrc: float
    deviceMrc: float
    api: float
    contractDuration: int

    @field_validator("deviceMrc", "api", "airtimeMrc", "totalUpfront", mode="before")
    @classmethod
    def validate_positive_money_value(cls, v: float):
        try:
            v = float(v)
            if v < 0:
                raise ValueError("Invalid monetary field, it can't be negative")
        except Exception as err:
            logging.error(err)
        return v

    @field_validator("contractDuration", mode="before")
    @classmethod
    def validate_positive_int_value(cls, v: int):
        try:
            v = int(v)
            if v < 0:
                raise ValueError("Invalid field, numeric value can't be negative")
        except Exception as err:
            logging.error(err)

        return v
